spring:
  data:
    mongodb:
      uri: mongodb+srv://ThanhNguyen:thanhnguyen@springbootrestful.xlacd.mongodb.net/epost

  security:
    oauth2:
      client:
        registration:
          linkedin:
            clientId: 86i7n8lv0ktqac
            clientSecret: cAKOoRTSRjJhG1EF
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            authorizationGrantType: authorization_code
            clientName: Linkedin
            clientAuthenticationMethod: client_secret_post
            scope:
              - profile
              - email
              - openid
          google:
            clientId: 296708997596-4hpcvnhaudiv6o4jn4louivb4fuo79hg.apps.googleusercontent.com
            clientSecret: rTx9PikgELiQngjNLfBumoAV
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile
        provider:
          linkedin:
            authorizationUri: https://www.linkedin.com/oauth/v2/authorization
            tokenUri: https://www.linkedin.com/oauth/v2/accessToken
            userInfoUri: https://api.linkedin.com/v2/userinfo
            userNameAttribute: sub
            jwkSetUri: https://www.linkedin.com/oauth/openid/jwks
app:
  auth:
    tokenSecret: 04ca023b39512e46d0c2cf4b48d5aac61d34302994c87ed4eff225dcf3b0a218739f3897051a057f9b846a69ea2927a587044164b7bae5e1306219d50b588cb1
    tokenExpirationMsec: 864000000
  cors:
    allowedOrigins: http://localhost:3000 # Comma separated list of allowed origins
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect
